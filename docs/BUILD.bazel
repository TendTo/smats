load("@doxygen//:doxygen.bzl", "doxygen")
load("//tools:rules_cc.bzl", "SMATS_NAME", "SMATS_VERSION")

doxygen(
    name = "docs",
    srcs = [
        "filters/markdown.sh",
        "//:README.md",
        "//smats:all_srcs",
    ] + glob([
        "_static/*",
    ]),
    configurations = [
        "INPUT = . smats smats/util",
        "PROJECT_NUMBER = %s" % SMATS_VERSION,
        "PROJECT_LOGO           = docs/_static/logo.svg",
        "USE_MDFILE_AS_MAINPAGE = README.md",
        "EXTRACT_PRIVATE        = YES",
        "HTML_FOOTER            = docs/_static/footer.html",
        "HTML_HEADER            = docs/_static/header.html",
        "FILTER_PATTERNS        = *.md=\"bash docs/filters/markdown.sh\"",
        "USE_MATHJAX            = YES",
        "HTML_EXTRA_STYLESHEET  = docs/_static/theme.css docs/_static/mermaid",
        "HTML_EXTRA_FILES       = docs/_static/doxygen-awesome-darkmode-toggle.js docs/_static/doxygen-awesome-fragment-copy-button.js",
        "HTML_EXTRA_FILES       += docs/_static/doxygen-awesome-interactive-toc.js docs/_static/doxygen-awesome-paragraph-link.js docs/_static/mermaid.dist.js",
        # Aliases
        "ALIASES               = licence=\"@par Licence:^^\"",
        # Default constructor
        "ALIASES               += constructor{1}=\"Construct a new \\1 object.^^\"",
        # Getters (read-only)
        "ALIASES               += getter{2}=\"Get read-only access to the \\1 of the \\2.^^@return \\1 of the \\2^^\"",
        "ALIASES               += getter{3}=\"Get read-only access to the \\1 of the \\2.^^^^\\3^^@return \\1 of the \\2^^\"",
        "ALIASES               += getter{4}=\"Get read-only access to the \\1 of the \\2.^^^^\\3^^@return \\1 of the \\2^^@see \\4^^\"",
        # Checkers (read-only boolean)
        "ALIASES               += checker{2}=\"Check whether the \\2 is \\1.^^@return true if the \\2 is \\1^^@return false if the \\2 is not \\1^^\"",
        "ALIASES               += checker{3}=\"Check whether the \\2 is \\1.^^^^\\3^^@return true if the \\2 is \\1^^@return false if the \\2 is not \\1^^\"",
        "ALIASES               += checker{4}=\"Check whether the \\2 is \\1.^^^^\\3^^@return true if the \\2 is \\1^^@return false if the \\2 is not \\1^^@see \\4^^\"",
        # Getter and setter (read-write)
        "ALIASES               += getsetter{2}=\"Get read-write access to the \\1 of the \\2.^^@return \\1 of the \\2^^\"",
        "ALIASES               += getsetter{3}=\"Get read-write access to the \\1 of the \\2.^^^^\\3^^@return \\1 of the \\2^^\"",
        "ALIASES               += getsetter{4}=\"Get read-write access to the \\1 of the \\2.^^^^\\3^^@return \\1 of the \\2^^@see \\4^^\"",
        # Less than
        "ALIASES               += less{1}=\"Compare two \\1 to determine the order between them.^^@param o other object to compare against^^@return true if this object is less than the other object^^@return false if this object is not less than the other object^^\"",
        "ALIASES               += less{2}=\"Compare two \\1 to determine the order between them.^^^^\\2^^@param o other object to compare against^^@return true if this object is less than the other object^^@return false if this object is not less than the other object^^\"",
        "ALIASES               += less{3}=\"Compare two \\1 to determine the order between them.^^^^\\2^^@param o other object to compare against^^@return true if this object is less than the other object^^@return false if this object is not less than the other object^^@see \\3^^\"",
        # Equal to
        "ALIASES               += equal_to{1}=\"Compare two \\1 to determine if they are equal.^^@param o other object to compare against^^@return true the two object are equal^^@return false if the two objects are different^^\"",
        "ALIASES               += equal_to{2}=\"Compare two \\1 to determine if they are equal.^^^^\\2^^@param o other object to compare against^^@return true the two object are equal^^@return false if the two objects are different^^\"",
        "ALIASES               += equal_to{3}=\"Compare two \\1 to determine if they are equal.^^^^\\2^^@param o other object to compare against^^@return true the two object are equal^^@return false if the two objects are different^^@see \\3^^\"",
        # Hash (requires an hasher parameter
        "ALIASES               += hash{1}=\"Compute the hash of this \\1 using the given @p hasher^^@tparam InvocableHashAlgorithm type of the hash algorithm to use^^@param hasher hash algorithm to use^^\"",
        "ALIASES               += hash{2}=\"Compute the hash of this \\1 using the given @p hasher.^^^^\\2^^@tparam InvocableHashAlgorithm type of the hash algorithm to use^^@param hasher hash algorithm to use^^\"",
        "ALIASES               += hash{3}=\"Compute the hash of this \\1 using the given @p hasher.^^^^\\2^^@tparam InvocableHashAlgorithm type of the hash algorithm to use^^@param hasher hash algorithm to use^^@see \\3^^\"",
        # Awesome Doxygen
        "GENERATE_TREEVIEW      = YES",
        "DISABLE_INDEX          = NO",
        "FULL_SIDEBAR           = NO",
    ],
    project_brief = "Satisfability Modulo Arithmetic Theories Symbols.",
    project_name = SMATS_NAME,
)
